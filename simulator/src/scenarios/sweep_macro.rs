/// Macro that generates a complete sweep simulation function
/// 
/// This macro eliminates the repetitive boilerplate code found in all sweep simulations.
/// It handles parameter calculation, SweepRunner setup, and result saving automatically.
/// 
/// # Arguments (all required):
/// 
/// - `$function_name`: The name of the generated async function (e.g., `run_sweep_cat_rate_simulation`)
/// - `$sweep_display_name`: Human-readable name for logging and progress messages (e.g., `"CAT Rate"`)
/// - `$results_directory`: Directory name where results will be saved (e.g., `"sim_sweep_cat_rate"`)
/// - `$parameter_name`: Name of the parameter being swept, used in JSON output (e.g., `"cat_ratio"`)
/// - `$config_loader_function`: Function that loads the sweep configuration (e.g., `Config::load_sweep`)
/// - `$config_type`: The specific config type for this sweep (e.g., `SweepConfig`)
/// - `$parameter_type`: Data type of the parameter being swept (e.g., `f64`, `u64`)
/// - `$step_field_name`: Name of the step field in the sweep config (e.g., `cat_rate_step`)
/// - `$config_modifier_closure`: Closure that modifies the base config with the current parameter value.
///      This closure takes two parameters: 
///      (1) the sweep config as a trait object, and 
///      (2) the current parameter value being tested. 
///      It must return a new Config with the parameter applied.
///      Example: `|sweep_config, param_value| { /* modify config with param_value */ }`
/// 
/// # Example Usage:
/// ```rust
/// sweep_simulation!(
///     run_sweep_cat_rate_simulation,    // Function name
///     "CAT Rate",                       // Display name for logging
///     "sim_sweep_cat_rate",             // Results directory
///     "cat_ratio",                      // Parameter name for JSON
///     Config::load_sweep,               // Config loader function
///     SweepConfig,                      // Config type
///     f64,                              // Parameter type
///     cat_rate_step,                    // Step field name
///     |sweep_config, cat_ratio| {       // Config modifier closure
///         let config = sweep_config.as_any().downcast_ref::<SweepConfig>().unwrap();
///         Config {
///             network: config.network.clone(),
///             num_accounts: config.num_accounts.clone(),
///             transactions: TransactionConfig {
///                 target_tps: config.transactions.target_tps,
///                 sim_total_block_number: config.transactions.sim_total_block_number,
///                 zipf_parameter: config.transactions.zipf_parameter,
///                 ratio_cats: cat_ratio,  // This is the parameter we're varying
///                 cat_lifetime_blocks: config.transactions.cat_lifetime_blocks,
///                 initialization_wait_blocks: config.transactions.initialization_wait_blocks,
///                 allow_cat_pending_dependencies: config.transactions.allow_cat_pending_dependencies,
///             },
///         }
///     }
/// );
/// ```
macro_rules! sweep_simulation {
    (
        $function_name:ident,                    // Name of the generated function
        $sweep_display_name:expr,                // Human-readable name for logging
        $results_directory:expr,                 // Directory name for saving results
        $parameter_name:expr,                    // Parameter name for JSON output
        $config_loader_function:path,            // Function to load sweep configuration
        $config_type:ty,                         // Type of the sweep configuration
        $parameter_type:ty,                      // Data type of the parameter being swept
        $step_field_name:ident,                  // Name of the step field in sweep config
        $config_modifier_closure:expr            // Closure to modify config with parameter value
    ) => {
        // Import the required sweep runner components
        use crate::scenarios::sweep_runner::{SweepRunner, save_generic_sweep_results};

        /// Runs the sweep simulation for $sweep_display_name
        /// 
        /// This function is automatically generated by the sweep_simulation! macro.
        /// It handles loading configuration, calculating parameter values, setting up
        /// the sweep runner, and executing all simulations in the sweep.
        pub async fn $function_name() -> Result<(), crate::config::ConfigError> {
            // Load the sweep configuration using the provided loader function
            // This reads the sweep settings from the corresponding TOML config file
            let sweep_config = $config_loader_function()?;
            
            // Calculate the parameter values for each simulation in the sweep
            // Creates a sequence: 0 * step, 1 * step, 2 * step, etc.
            // Each value represents a different parameter setting to test
            let parameter_values: Vec<$parameter_type> = (0..sweep_config.sweep.num_simulations)
                .map(|i| i as $parameter_type * sweep_config.sweep.$step_field_name.unwrap())
                .collect();

            // Create the generic sweep runner that handles all common functionality
            // This eliminates code duplication across different sweep types
            let runner = SweepRunner::new(
                $sweep_display_name,              // Human-readable name for progress messages
                $results_directory,               // Directory where results will be saved
                $parameter_name,                  // Parameter name used in JSON output files
                parameter_values,                 // List of parameter values to test
                // Function to load the sweep configuration (wrapped for trait compatibility)
                Box::new(|| {
                    $config_loader_function().map(|config| Box::new(config) as Box<dyn crate::scenarios::sweep_runner::SweepConfigTrait>)
                }),
                // Function to create a modified config for each simulation
                Box::new($config_modifier_closure),
                // Function to save the combined results from all simulations
                // This creates the final JSON file with all sweep results
                Box::new(|results_dir, all_results| {
                    save_generic_sweep_results(results_dir, $parameter_name, all_results)
                }),
            );

            // Run the complete sweep simulation
            // This handles all simulation execution, logging, progress tracking, and result saving
            runner.run().await
        }
    };
}

 